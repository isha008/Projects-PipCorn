{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name, options = {}) {\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n  executeCallback(server, session, callback) {\n    (async () => {\n      const db = this.db;\n      const options = this.options;\n      const name = this.name;\n      const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n      let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n      if (!encryptedFields && encryptedFieldsMap) {\n        // If the MongoClient was configured with an encryptedFieldsMap,\n        // and no encryptedFields config was available in it or explicitly\n        // passed as an argument, the spec tells us to look one up using\n        // listCollections().\n        const listCollectionsResult = await db.listCollections({\n          name\n        }, {\n          nameOnly: false\n        }).toArray();\n        encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n      }\n      if (encryptedFields) {\n        const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n        const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n        for (const collectionName of [escCollection, ecocCollection]) {\n          // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n          const dropOp = new DropCollectionOperation(db, collectionName);\n          try {\n            await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n          } catch (err) {\n            if (!(err instanceof error_1.MongoServerError) || err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n              throw err;\n            }\n          }\n        }\n      }\n      return this.executeWithoutEncryptedFieldsCheck(server, session);\n    })().then(result => callback(undefined, result), err => callback(err));\n  }\n  executeWithoutEncryptedFieldsCheck(server, session) {\n    return new Promise((resolve, reject) => {\n      super.executeCommand(server, session, {\n        drop: this.name\n      }, (err, result) => {\n        if (err) return reject(err);\n        resolve(!!result.ok);\n      });\n    });\n  }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n  executeCallback(server, session, callback) {\n    super.executeCommand(server, session, {\n      dropDatabase: 1\n    }, (err, result) => {\n      if (err) return callback(err);\n      if (result.ok) return callback(undefined, true);\n      callback(undefined, false);\n    });\n  }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["error_1","require","command_1","operation_1","DropCollectionOperation","CommandOperation","constructor","db","name","options","executeCallback","server","session","callback","encryptedFieldsMap","client","autoEncryption","encryptedFields","databaseName","listCollectionsResult","listCollections","nameOnly","toArray","escCollection","ecocCollection","collectionName","dropOp","executeWithoutEncryptedFieldsCheck","err","MongoServerError","code","MONGODB_ERROR_CODES","NamespaceNotFound","then","result","undefined","Promise","resolve","reject","executeCommand","drop","ok","exports","DropDatabaseOperation","dropDatabase","defineAspects","Aspect","WRITE_OPERATION"],"sources":["/home/blessan/node_modules/mongodb/src/operations/drop.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Db } from '../db';\nimport { MONGODB_ERROR_CODES, MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface DropCollectionOptions extends CommandOperationOptions {\n  /** @experimental */\n  encryptedFields?: Document;\n}\n\n/** @internal */\nexport class DropCollectionOperation extends CommandOperation<boolean> {\n  override options: DropCollectionOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options: DropCollectionOptions = {}) {\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    (async () => {\n      const db = this.db;\n      const options = this.options;\n      const name = this.name;\n\n      const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n      let encryptedFields: Document | undefined =\n        options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n\n      if (!encryptedFields && encryptedFieldsMap) {\n        // If the MongoClient was configured with an encryptedFieldsMap,\n        // and no encryptedFields config was available in it or explicitly\n        // passed as an argument, the spec tells us to look one up using\n        // listCollections().\n        const listCollectionsResult = await db\n          .listCollections({ name }, { nameOnly: false })\n          .toArray();\n        encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n      }\n\n      if (encryptedFields) {\n        const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n        const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n\n        for (const collectionName of [escCollection, ecocCollection]) {\n          // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n          const dropOp = new DropCollectionOperation(db, collectionName);\n          try {\n            await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n          } catch (err) {\n            if (\n              !(err instanceof MongoServerError) ||\n              err.code !== MONGODB_ERROR_CODES.NamespaceNotFound\n            ) {\n              throw err;\n            }\n          }\n        }\n      }\n\n      return this.executeWithoutEncryptedFieldsCheck(server, session);\n    })().then(\n      result => callback(undefined, result),\n      err => callback(err)\n    );\n  }\n\n  private executeWithoutEncryptedFieldsCheck(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      super.executeCommand(server, session, { drop: this.name }, (err, result) => {\n        if (err) return reject(err);\n        resolve(!!result.ok);\n      });\n    });\n  }\n}\n\n/** @public */\nexport type DropDatabaseOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropDatabaseOperation extends CommandOperation<boolean> {\n  override options: DropDatabaseOptions;\n\n  constructor(db: Db, options: DropDatabaseOptions) {\n    super(db, options);\n    this.options = options;\n  }\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    super.executeCommand(server, session, { dropDatabase: 1 }, (err, result) => {\n      if (err) return callback(err);\n      if (result.ok) return callback(undefined, true);\n      callback(undefined, false);\n    });\n  }\n}\n\ndefineAspects(DropCollectionOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropDatabaseOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}